/*imports para el parser*/


import java_cup.runtime.*;
import java.io.*;
import java.util.Scanner;


parser code {:
  protected Lexer lexer;
  protected Pluma pluma;

  public void print(String s){
	System.out.println(s);
  }

:}

/* define how to connect to the scanner! */
init with {:
  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  Scanner scanner = new Scanner(System.in);
  print("nombre del archivo:");
  String archivo = scanner.nextLine();
  File file = new File(archivo);
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);
  pluma = new Pluma(new Tablero());
  scanner.close();
:};


scan with {: return lexer.next_token(); :};

/* Terminals (tokens returned by the scanner). */
//BAJARP, LEVANTARP,COLORP,DIRP ...-PLUMA
//PABAJO PARRIBA PCOLOR SETEAR PLUMA PLUMA-ALGO

terminal           BAJARP,LEVANTARP,COLORP,DIRP,AVANZA,TCOLOR,BORDE,DIRACT,PABAJO,PARRIBA,NUMBER,COLOR,DIRECCION,IF,WHILE,THEN,ELSE,AND,OR,NOT,ABRE,CIERRA,PTOCOMA,DO,PCOLOR;
      
/* Non terminals */
non terminal            OP,EXPR,ROOT;

/* Precendenses*/

precedence left AND, OR, PTOCOMA;
/* The grammar rules */


start with ROOT;

ROOT::= OP:o {: o.execute(pluma); :};

OP ::= 	BAJARP  {: RESULT = new BajarPluma()  ;:}
 		|LEVANTARP {: RESULT = new LevantarPluma() ; :}
 		| COLORP COLOR:col {:RESULT= new SetColor(col); :}
 		| DIRP DIRECCION:direc {: RESULT= new SetDireccion(direc); :}
 		| AVANZA NUMBER:n {: RESULT =new Avanzar(); :}		
 		| IF EXPR:e THEN ABRE OP:o CIERRA {: RESULT = new CicloIF(new ClaseIF(e) ,new ClaseThen(o)); :}
 		| IF EXPR:e THEN ABRE OP:o1 CIERRA ELSE ABRE OP:o2 CIERRA {: RESULT = CicloIF(new ClaseIF(e) ,new ClaseThen(o1), new ClaseElse(o2)); :}
 		| WHILE EXPR:e DO ABRE OP:o CIERRA {: RESULT = Iterador(new ClaseWhile(e), new ClaseDO(o)); :}
 		| OP:o1 PTOCOMA OP:o2 {: RESULT = o1.addAccion(o2); :}
 		;
 		
 		
 EXPR ::=	TCOLOR COLOR:c {: RESULT = new ColorCasilla(c); :}
 			| BORDE {: RESULT = Borde(); :}
 			| DIRACT DIRECCION:d {: RESULT = DireccionPluma(d); :}
 			| PCOLOR COLOR:col1 {: RESULT = new ColorPluma(col1);  :}
 			| PARRIBA {: RESULT = new PlumaArriba(); :}
 			| PABAJO {: RESULT = new PlumaAbajo(); :}
 			| EXPR:e1 AND EXPR:e2 {: RESULT = new ClaseAnd(e1,e2); :}
 			| EXPR:e1 OR EXPR:e2 {: RESULT = new ClaseOr(e1,e2); :}
 			| NOT EXPR:e {: RESULT = new ClaseNot(e); :}
 		 
 			;
 			
 			
 			
 	