/*imports para el parser*/


import java_cup.runtime.*;
import java.io.*;
import java.util.Scanner;


parser code {:
  protected Lexer lexer;
  protected Pluma pluma;

  public void print(String s){
	System.out.println(s);
  }

:}

/* define how to connect to the scanner! */
init with {:
  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  Scanner scanner = new Scanner(System.in);
  print("nombre del archivo:");
  String archivo = scanner.nextLine();
  File file = new File(archivo);
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);
  pluma = new Pluma(new Tablero());
  scanner.close();
:};


scan with {: return lexer.next_token(); :};

/* Terminals (tokens returned by the scanner). */
//BAJARP, LEVANTARP,COLORP,DIRP ...-PLUMA
//PABAJO PARRIBA PCOLOR SETEAR PLUMA PLUMA-ALGO

terminal           BAJARP,LEVANTARP,COLORP,DIRP,AVANZA,TCOLOR,BORDE,DIRACT,PABAJO,PARRIBA,NUMBER,COLOR,DIRECCION,IF,WHILE,THEN,ELSE,AND,OR,NOT,ABRE,CIERRA,PTOCOMA,DO,PCOLOR;

/* Non terminals */
non terminal            OP,EXPR,ROOT;

/* Precendenses*/

precedence left AND, OR, PTOCOMA;
/* The grammar rules */


start with ROOT;

ROOT::= OP:o {: Accion accion= (Accion) o ; accion.execute(pluma); pluma.imprimir(); :};

OP ::= 	BAJARP  {: RESULT = new BajarPluma()  ;:}
 		|LEVANTARP {: RESULT = new LevantarPluma() ; :}
 		| COLORP COLOR:col {: String color = (String) col ;RESULT= new SetColor(color); :}
 		| DIRP DIRECCION:direc {: String direct = (String) direc ; RESULT= new SetDireccion(direct); :}
 		| AVANZA NUMBER:n {: RESULT =new Avanzar(); :}		
 		| IF EXPR:e THEN ABRE OP:o CIERRA {: Condiciones cond = (Condiciones) e; Accion acc = (Accion) o; RESULT = new CicloIF(new ClaseIF(cond) ,new ClaseThen(acc)); :}
 		| IF EXPR:e THEN ABRE OP:o1 CIERRA ELSE ABRE OP:o2 CIERRA {:Condiciones cond = (Condiciones) e; Accion acc1 = (Accion) o1; Accion acc2 = (Accion) o2; RESULT = new CicloIF(new ClaseIF(cond) ,new ClaseThen(acc1), new ClaseElse(acc2)); :}
 		| WHILE EXPR:e DO ABRE OP:o CIERRA {: Condiciones cond = (Condiciones) e; Accion acc = (Accion) o;RESULT = new Iterador(new ClaseWhile(cond), new ClaseDO(acc)); :}
 		| OP:o1 PTOCOMA OP:o2 {: Accion acc1 = (Accion) o1; Accion acc2 = (Accion) o2; acc1.addAccion(acc2);RESULT = acc1; :}
 		;
 		
 		
 EXPR ::=	TCOLOR COLOR:c {: String color = (String) c; RESULT = new ColorCasilla(color); :}
 			| BORDE {: RESULT = new Borde(); :}
 			| DIRACT DIRECCION:d {: String direct = (String) d ; RESULT = new DireccionPluma(direct); :}
 			| PCOLOR COLOR:col1 {: String color = (String) col1; RESULT = new ColorPluma(color);  :}
 			| PARRIBA {: RESULT = new PlumaArriba(); :}
 			| PABAJO {: RESULT = new PlumaAbajo(); :}
 			| EXPR:e1 AND EXPR:e2 {: Condiciones cond1 = (Condiciones) e1; Condiciones cond2 = (Condiciones) e2; RESULT = new ClaseAnd(cond1,cond2); :}
 			| EXPR:e1 OR EXPR:e2 {:  Condiciones cond1 = (Condiciones) e1; Condiciones cond2 = (Condiciones) e2; RESULT = new ClaseOr(cond1,cond2);  :}
 			| NOT EXPR:e {: Condiciones cond1 = (Condiciones) e; RESULT = new ClaseNot(cond1); :}
 		 
 			;
 			
 			
 			
 	